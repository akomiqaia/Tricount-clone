{"version":3,"sources":["serviceWorker.js","components/HorizontalMenu.js","components/FormComponents.js","components/Expense.js","components/Debts.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","App","react_default","a","createElement","className","react_router_dom","to","key","Component","CheckBox","props","id","onChange","handleCheck","type","checked","isChecked","value","style","float","marginRright","dynamicMoney","ADD_EXPENSE","DELETE_EXPENSE","store","createStore","state","action","newExpense","uuid","v4","text","timestamp","moment","format","payedBy","amountPayed","amount","listOfExpenses","concat","filter","item","Expense","_this","this","subscribe","forceUpdate","getState","Expense_ListOfExpenses","Expense_ListInput","ListInput","isOpen","title","forWhom","handleFormOpen","_this2","setState","handleFormcClose","e","target","name","handleSubmit","event","preventDefault","dispatch","forEach","user","checkedUser","length","_this3","map","FormComponents","Object","assign","onClick","React","ListOfExpenses","handleClick","_this5","listItems","listItem","index","Debts","HorizontalMenu","react_router","path","component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e725d258.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom'\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n          <div className=\"ui fluid two item pointing menu\">\n            <NavLink\n              to={`/expenses`}\n              className='item'\n              key='exp1'\n            >\n              Expenses\n            </NavLink>\n            <NavLink\n              to={`/debts`}\n              className='item'\n              key='debts1'\n            >\n              Debts\n            </NavLink>\n      </div>\n\n\n    )\n  }\n}\n\n\nexport default App;\n","import React from \"react\";\n\nexport const CheckBox = props => {\n  let style= {\n    float: 'right',\n    marginRright: '0.25em'\n  }\n  return (\n    <div key={props.id}>\n\n      <input\n        key = {props.id}\n        onChange={props.handleCheck}\n        type=\"checkbox\" \n        checked={props.isChecked} \n        value={props.value}  \n      />\n      <label>{props.value}</label>\n      <span style={style}>{props.dynamicMoney}</span>\n      <div className='ui divider'></div>\n\n    </div>\n    \n  )\n}\n\n\nexport default CheckBox","import React, { Component } from 'react';\nimport { createStore } from 'redux'\nimport moment from 'moment'\nimport uuid from 'uuid'\nimport CheckBox from './FormComponents'\n\n// define type of actions as constants to reduce the possibility of typo while builidng the store for the app\nconst ADD_EXPENSE = 'ADD_EXPENSE'\nconst DELETE_EXPENSE = 'DELETE_EXPENSE'\n\n\nconst initialState = {listOfExpenses: []}\n\n\nfunction reducer(state, action) {\n  if (action.type === ADD_EXPENSE) {\n    const newExpense = {\n      id: uuid.v4(),\n      text: action.text,\n      timestamp: moment().format(\"Do of MMM\"),\n      payedBy: action.payedBy,\n      amountPayed: action.amount\n    }\n    return {\n      listOfExpenses: state.listOfExpenses.concat(newExpense)\n    }\n    // if action type is delete with using filter we can remove the list item we want.\n    // we’re building a new array containing every object that does not \n    // have an id that corresponds to the action’s id .\n  } else if (action.type === DELETE_EXPENSE) {\n    return {\n      listOfExpenses: state.listOfExpenses.filter((item) => (\n        item.id !== action.id\n      ))\n    }\n  } else {\n    return state\n  }\n}\n\nconst store = createStore(reducer, initialState)\n\nclass Expense extends Component {\n  componentDidMount() {\n    store.subscribe(() => this.forceUpdate())\n  }\n  render() {\n    const listOfExpenses = store.getState().listOfExpenses\n    return (\n      <div className='ui centered segment'>\n          <ListOfExpenses listOfExpenses={listOfExpenses} />\n          <ListInput />\n      </div>\n    );\n  }\n}\n\nclass ListInput extends React.Component {\n  state = {\n    isOpen: false,\n    title: '',\n    amount: '',\n    payedBy: 'Andrea',\n    // forWhom will keep the state of checkbox with whom the payer has to split the bill\n    forWhom: [\n      {id: 1, value: 'Andrea', isChecked: false, dynamicMoney: 0},\n      {id:2, value: 'Ariann', isChecked: false, dynamicMoney: 0},\n      {id:3, value: 'Ako', isChecked: false, dynamicMoney: 0},\n      {id:4, value: 'Evie', isChecked: false, dynamicMoney: 0},\n      {id:5, value: 'Camilla', isChecked: false, dynamicMoney: 0},\n      {id:6, value: 'Max', isChecked: false, dynamicMoney: 0},\n      {id:7, value: 'Molly', isChecked: false, dynamicMoney: 0},\n    ]\n  }\n  handleFormOpen = () => {\n    this.setState({ isOpen: true })\n  }\n  handleFormcClose = () => {\n    this.setState({ isOpen: false })\n  }\n  onChange = (e) => {\n    if(e.target.name === 'title') {\n      this.setState({\n        title: e.target.value,\n      })\n    } else if (e.target.name === 'amount') {\n    this.setState({\n      amount: e.target.value,\n    })} else if (e.target.name === 'select') {\n      this.setState({\n        payedBy: e.target.value,\n      })\n    }\n  };\n// on submit the data needed has to be displayed on the screen\n// handleCheck() function updates components state and some of the data such as dynamicMoney will be used to calculate total debts\n  handleSubmit = (event) => {\n    event.preventDefault()\n\n    store.dispatch({\n      type: ADD_EXPENSE,\n      text: this.state.title,\n      amount: this.state.amount,\n      payedBy: this.state.payedBy\n    })\n    this.setState(\n      {\n        isOpen: false,\n        title: '',\n        amount: '', \n        payedBy: 'Andrea',\n        forWhom: [\n          {id: 1, value: 'Andrea', isChecked: false, dynamicMoney: 0},\n          {id:2, value: 'Ariann', isChecked: false, dynamicMoney: 0},\n          {id:3, value: 'Ako', isChecked: false, dynamicMoney: 0},\n          {id:4, value: 'Evie', isChecked: false, dynamicMoney: 0},\n          {id:5, value: 'Camilla', isChecked: false, dynamicMoney: 0},\n          {id:6, value: 'Max', isChecked: false, dynamicMoney: 0},\n          {id:7, value: 'Molly', isChecked: false, dynamicMoney: 0},\n        ]\n      }\n      )\n    \n  }\n\n  // handleCheck will handle checkbox functionality and also be responsible of updating the dynamicMoney\n  // dynamic money is the total amount splet among the checked users.\n  handleCheck = (e) => {\n    let forWhom = this.state.forWhom\n    let amount= this.state.amount\n    forWhom.forEach((user) => {\n      if(user.value === e.target.value) {\n        user.isChecked = e.target.checked\n\n\n        let checkedUser = forWhom.filter(user => user.isChecked)\n        let dynamicMoney = amount/checkedUser.length\n        // if user is unchecked his balance has to be zero\n        if(!user.isChecked) {\n          user.dynamicMoney = 0\n        }\n        // FOR EVERY CHEKED USER WE HAVE TO DISPLAY SPLIT BALANCE THAT WILL EVNTUALLY ADD ON MAIN STATE\n        checkedUser.forEach(user => {\n          user.dynamicMoney = dynamicMoney\n        })\n        \n        \n      }\n    })\n    this.setState({forWhom: forWhom})\n  }\n  \n\n  render() {\n    if(this.state.isOpen) {\n      return(\n      <form className=\"ui form\">\n        <div className=\"field\">\n          <label>Title</label>\n          <input\n            onChange={this.onChange}\n            value={this.state.title} \n            type=\"text\" \n            name=\"title\" \n          />\n        </div>\n        <div className=\"field\">\n          <label>Amount</label>\n          <input \n            type=\"number\" \n            name=\"amount\" \n            onChange={this.onChange}\n            value={this.state.amount}\n          />\n        </div>\n        <div className='field'>\n          <label>Paid by:</label>\n          {/* dropdown menu to slect who payed for the item */}\n          <select name='select' className=\"ui fluid dropdown\" onChange={this.onChange}>\n            {this.state.forWhom.map((user) => {\n              return(\n                <option\n                  key={user.id} \n                  value={user.value}\n                >\n                    {user.value}\n                </option>\n              )\n            })}\n          </select>\n        </div>\n        <div className='ui divider'></div>\n        <div className=\"field\">\n            {this.state.forWhom.map((user) => {\n              return(\n                <CheckBox\n                  dynamicMoney={this.state.forWhom.dynamicMoney}\n                  key= {user.id}\n                  handleCheck={this.handleCheck}\n                   {...user}\n                />\n                \n              )\n            })}\n        </div>\n        <button \n          onClick={this.handleSubmit}\n          className=\"ui primary button\" \n          type=\"submit\">Submit</button>\n          <button \n          onClick={this.handleFormcClose}\n          className=\"ui secondary button\" \n          type=\"submit\">Cancel</button>\n      </form>\n    ) } else {\n      return (\n        <div className='ui basic content center aligned segment'>\n          <button\n            className='ui basic button icon'\n            onClick={this.handleFormOpen}\n          >\n            <i className='plus icon' />\n          </button>\n        </div>\n      )\n    }\n  }\n}\n\nclass ListOfExpenses extends React.Component {\n  handleClick = (id) => {\n    store.dispatch({\n      type: DELETE_EXPENSE,\n      id: id,\n    })\n  }\n  render() {\n    \n\n    const listItems = this.props.listOfExpenses.map((listItem, index) => (\n        <div \n          className=\"item\"\n\n          key={index}\n          onClick={() => this.handleClick(listItem.id)}\n          >\n          \n          <div className=\"content\">\n            <div className=\"header\">{listItem.text}</div>\n            <div className=\"ui right floated header\">{`${listItem.amountPayed} £`}</div>\n            <div className=\"meta\">\n              <span>Payed by: <strong>{listItem.payedBy}</strong></span>\n              <span className='ui right floated'>{listItem.timestamp}</span>\n            </div>\n            \n          </div>\n        </div>\n    ))\n    return (\n      <div className='ui divided link items'>\n        \n          {listItems}\n        \n      </div>\n    )\n  }\n  \n}\n\nexport default Expense;\n","import React, { Component } from 'react';\n\nclass Debts extends Component {\n  \n  render() {\n    return (\n        <div className='ui centered segment'>Hello</div>\n      )\n  }\n}\n\n\nexport default Debts;\n","import React, { Component } from 'react';\nimport {Route, Switch} from 'react-router-dom'\nimport HorizontalMenu from './components/HorizontalMenu'\nimport Expense from './components/Expense';\nimport Debts from './components/Debts';\n\n// TODO: \n  // 1. Make expenses route default for the application\n\n\n\n\n// app component displays horizontal switchable menu and contents under the active tabs\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className='ui four column centered grid'>\n        <div className='column'>\n          <div>\n            {/* Horizontal menu contains two switchable tabs, expenses and debts */}\n            <HorizontalMenu />\n          </div>\n          <div>\n          {/* switch between expenses and debts tab */}\n            <Switch>\n              <Route \n                path='/expenses'\n                component={Expense}\n              />\n              <Route \n                path='/debts'\n                component={Debts}\n              />\n            </Switch>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}